name: Everything Monorepo CI/CD



# First runs linter and tests all affected projects
# Then, for each project that requires deployment, deploy-<project>-<service-type> is added
# Environment variables are labelled <project-name>_SHORT_DESCRIPTION
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      manual-deploy:
        description: "App(s) to Deploy (dotcom, jpal-frontend)"
        required: false
        default: ""
        
concurrency:
  # Never have two deployments happening at the same time (potential race condition)
  group: '{{ github.head_ref ||  github.ref }}'


jobs:
  pre-deploy:
    runs-on: ubuntu-latest
    outputs:
      affected-names : ${{ steps.should-deploy.outputs.names }}
    steps:
    - uses: actions/checkout@v3
      with:
          # We need to fetch all branches and commits so that Nx affected has a base to compare against.
          fetch-depth: 0
    - name: Use Node.js 16
      uses: actions/setup-node@v3
      with:
        node-version: 16.x
        cache: 'yarn'
    
    - name: Install Dependencies
      run: yarn install
      
      
    # In any subsequent steps within this job (myjob) we can reference the resolved SHAs
     # using either the step outputs or environment variables:

     # ===========================================================================
     # OPTION 1) Environment variables
     # ===========================================================================
    - name: Derive appropriate SHAs for base and head for `nx affected` commands
      uses: nrwl/nx-set-shas@v3

    - run: |
          echo "BASE: ${{ env.NX_BASE }}"
          echo "HEAD: ${{ env.NX_HEAD }}"

    - name: Nx Affected Lint
      run: npx nx affected -t lint
      
    - name: Nx Affected Test
      run: npx nx affected -t test
      
    - name: Nx Affected Build
      run: npx nx affected -t build
        
    - name: Determine who needs to be deployed
      id: should-deploy
      run: |
        echo "The following projects have been affected: [$(npx nx print-affected -t build --select=tasks.target.project)]";
        echo "names=$(npx nx print-affected -t build --select=tasks.target.project)" >> "$GITHUB_OUTPUT"
        
    - name: Debug logs
      run: |
        echo "Manual Deploy: ${{github.event.inputs.manual-deploy}}";
        echo "To Deploy: ${{steps.should-deploy.outputs.names}}";
        echo "Event: ${{github.event_name}}";
        echo "Ref: ${{github.ref}}";
        echo "Will deploy?: ${{github.event_name == 'push' && github.ref == 'refs/heads/main'}}";
        echo "Matches dotcom: ${{contains(github.event.inputs.manual-deploy, 'dotcom')}}";
        echo "Matches affected: ${{contains(needs.pre-deploy.outputs.affected_names, 'dotcom')}}
    
     


  deploy-c4cneudotcom:
    needs: pre-deploy
    if: (contains(github.event.inputs.manual-deploy, 'dotcom') || contains(needs.pre-deploy.outputs.affected_names, 'dotcom')) && github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    # For "simplicity", deployment settings are configured in the AWS Amplify Console
    # This just posts to a webhook telling Amplify to redeploy the main branch
    steps:
      - name: Tell Amplify to rebuild
        run: curl -X POST -d {} ${DOTCOM_WEBHOOK_DEPLOY}  -H "Content-Type:application/json"
        env:
          DOTCOM_WEBHOOK_DEPLOY: ${{ secrets.DOTCOM_WEBHOOK_DEPLOY }}

# If deploying a new service via actions, use the following template:
#  deploy:
#     needs: lint-and-test
#     if: github.event_name == 'push' && github.ref == 'refs/heads/master'
#     runs-on: ubuntu-latest

